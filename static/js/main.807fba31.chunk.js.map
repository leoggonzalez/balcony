{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["brushes","App","useState","tiles","setTiles","brush","setBrush","copied","setCopied","updateTile","index","updatedTiles","array","stringArray","map","item","charAt","join","url","URL","window","location","href","params","searchParams","set","search","toString","newUrl","history","replaceState","updateUrl","woodenTilesNumber","filter","length","grassTilesNumber","useEffect","tilesArray","i","push","queryString","design","URLSearchParams","get","split","parseUrl","setTimeout","className","Math","ceil","onClick","type","value","id","copyText","document","getElementById","select","setSelectionRange","execCommand","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.807fba31.chunk.js","sourcesContent":["import { useEffect, useState } from \"react\";\nimport \"./App.scss\";\n\ntype Brush = \"wooden\" | \"grass\";\n\nconst brushes: [\"wooden\", \"grass\"] = [\"wooden\", \"grass\"];\n\nfunction updateUrl(array: string[]): void {\n  const stringArray = array.map((item, index) => item.charAt(0)).join(\"-\");\n  const url = new URL(window.location.href);\n  const params = url.searchParams;\n\n  // new value of \"id\" is set to \"101\"\n  params.set(\"design\", stringArray);\n\n  // change the search property of the main url\n  url.search = params.toString();\n\n  // the new url string\n  const newUrl = url.toString();\n\n  // output : http://demourl.com/path?id=101&topic=main\n  // eslint-disable-next-line no-restricted-globals\n  history.replaceState({}, \"Balcony\", newUrl);\n}\n\nfunction parseUrl(): string[] {\n  const tilesArray: string[] = [];\n  for (let i = 0; i < 56; i++) {\n    tilesArray.push(\"\");\n  }\n\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const design = urlParams.get(\"design\");\n\n  if (design) {\n    return design\n      .split(\"-\")\n      .map((item) => (item === \"w\" ? \"wooden\" : item === \"g\" ? \"grass\" : \"\"));\n  }\n  return tilesArray;\n}\n\nfunction App() {\n  const [tiles, setTiles] = useState([\"\"]);\n  const [brush, setBrush] = useState<Brush>(\"wooden\");\n  const [copied, setCopied] = useState(false);\n\n  function updateTile(index: number): void {\n    const updatedTiles = [...tiles];\n    updatedTiles[index] = brush;\n    setTiles(updatedTiles);\n    updateUrl(updatedTiles);\n  }\n\n  const woodenTilesNumber = tiles.filter((item) => item === \"wooden\").length;\n  const grassTilesNumber = tiles.filter((item) => item === \"grass\").length;\n\n  useEffect(() => {\n    setTiles(parseUrl());\n  }, []);\n\n  useEffect(() => {\n    if (copied) {\n      setTimeout(() => {\n        setCopied(false);\n      }, 2000);\n    }\n  }, [copied]);\n\n  function shareLink(): void {\n    setCopied(false);\n    /* Get the text field */\n    setTimeout(() => {\n      const copyText = document.getElementById(\n        \"current-url-input\"\n      ) as HTMLInputElement;\n\n      /* Select the text field */\n      if (copyText) {\n        copyText.select();\n        copyText.setSelectionRange(0, 99999); /* For mobile devices */\n\n        /* Copy the text inside the text field */\n        document.execCommand(\"copy\");\n\n        setCopied(true);\n      }\n    }, 100);\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <header>\n          <h1>Ayudenme a dise√±ar el balcon</h1>\n        </header>\n        <section>\n          <div>\n            <header>\n              <h3>Madera:</h3>\n            </header>\n            <p>Usado: {woodenTilesNumber}</p>\n            <p>Cajas: {Math.ceil(woodenTilesNumber / 9)}</p>\n            Sobran: {Math.ceil(woodenTilesNumber / 9) * 9 - woodenTilesNumber}\n          </div>\n          <div>\n            <header>\n              <h3>Pasto sintetico:</h3>\n            </header>\n            <p>Usado: {grassTilesNumber}</p>\n            <p>Cajas: {Math.ceil(grassTilesNumber / 9)}</p>\n            <p>\n              Sobran: {Math.ceil(grassTilesNumber / 9) * 9 - grassTilesNumber}\n            </p>\n          </div>\n        </section>\n        <section>\n          <p>\n            <strong>Seleccionar material</strong>\n          </p>\n          <div className=\"brushes\">\n            {brushes.map((item) => {\n              return (\n                <div\n                  key={item}\n                  className={`brush brush--${item} ${\n                    brush === item ? \"brush--selected\" : \"\"\n                  }`}\n                  onClick={() => setBrush(item)}\n                ></div>\n              );\n            })}\n          </div>\n        </section>\n        <section>\n          <h2>Balcony</h2>\n          <div className=\"balcony\">\n            <div className=\"tiles\">\n              {tiles.map((item, index) => {\n                return (\n                  <div\n                    className={`tile ${item !== \"\" ? `tile--${item}` : \"\"}`}\n                    key={index}\n                    onClick={() => updateTile(index)}\n                  />\n                );\n              })}\n            </div>\n          </div>\n          <div className=\"indoors\">\n            <div className=\"indoors__left-door\">\n              puerta izquierda (bloqueada)\n            </div>\n            <div className=\"indoors__left-window\">ventanal izquierdo</div>\n            <div className=\"indoors__column\">columna</div>\n            <div className=\"indoors__right-window\">ventanal derecho</div>\n            <div className=\"indoors__right-door\">puerta derecha</div>\n          </div>\n        </section>\n        <footer>\n          <input\n            type=\"text\"\n            value={window.location.href}\n            id=\"current-url-input\"\n          ></input>\n          <div>\n            <button onClick={() => shareLink()}>Compartir</button>\n          </div>\n          {copied && <div className=\"copied\">Link copiado!</div>}\n        </footer>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}