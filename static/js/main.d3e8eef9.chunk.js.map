{"version":3,"sources":["components/Balcony/Balcony.tsx","components/Brushes/Brushes.tsx","components/Materials/Materials.tsx","components/ShareButton/ShareButton.tsx","App.tsx","model/util.ts","reportWebVitals.ts","index.tsx"],"names":["Balcony","tiles","onTileUpdate","className","map","item","index","onClick","brushes","Brushes","selectedBrush","onBrushSelect","calculateBoxesPerTiles","boxes","Math","ceil","leftOver","Materials","woodenTiles","filter","length","grassTiles","woodenBoxes","woodenLeftOver","grassBoxes","grassLeftOver","width","ShareButton","useState","copied","setCopied","inputRef","useRef","useEffect","setTimeout","type","ref","current","value","window","location","href","select","setSelectionRange","document","execCommand","error","console","log","shareLink","App","setTiles","brush","setBrush","updateTile","updatedTiles","array","stringArray","charAt","join","url","URL","params","searchParams","set","search","toString","newUrl","history","replaceState","updateUrl","tilesArray","i","push","queryString","design","URLSearchParams","get","split","parseUrl","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.d3e8eef9.chunk.js","sourcesContent":["import \"./Balcony.scss\";\nimport React from \"react\";\n\ninterface Props {\n  tiles: string[];\n  onTileUpdate: (index: number) => void;\n}\n\nexport function Balcony({ tiles, onTileUpdate }: Props): JSX.Element {\n  return (\n    <section>\n      <h2>Balcony</h2>\n      <div className=\"balcony\">\n        <div className=\"tiles\">\n          {tiles.map((item, index) => {\n            return (\n              <div\n                className={`tile ${item !== \"\" ? `tile--${item}` : \"\"}`}\n                key={index}\n                onClick={() => onTileUpdate(index)}\n              />\n            );\n          })}\n        </div>\n      </div>\n      <div className=\"indoors\">\n        <div className=\"indoors__left-door\">left door (blocked)</div>\n        <div className=\"indoors__left-window\">left window</div>\n        <div className=\"indoors__column\">column</div>\n        <div className=\"indoors__right-window\">right window</div>\n        <div className=\"indoors__right-door\">right door</div>\n      </div>\n    </section>\n  );\n}\n","import \"./Brushes.scss\";\nimport React from \"react\";\n\nexport type Brush = \"wooden\" | \"grass\";\n\ninterface Props {\n  selectedBrush: Brush;\n  onBrushSelect: (brush: Brush) => void;\n}\n\nconst brushes: Brush[] = [\"wooden\", \"grass\"];\n\nexport function Brushes({ selectedBrush, onBrushSelect }: Props): JSX.Element {\n  return (\n    <section>\n      <h2>Select material</h2>\n      <div className=\"brushes\">\n        {brushes.map((item) => {\n          return (\n            <div\n              key={item}\n              className={`brush brush--${item} ${\n                selectedBrush === item ? \"brush--selected\" : \"\"\n              }`}\n              onClick={() => onBrushSelect(item)}\n            ></div>\n          );\n        })}\n      </div>\n    </section>\n  );\n}\n","import React from \"react\";\nimport \"./Materials.scss\";\n\ninterface Props {\n  tiles: string[];\n}\n\nfunction calculateBoxesPerTiles(tiles: number): {\n  boxes: number;\n  leftOver: number;\n} {\n  return {\n    boxes: Math.ceil(tiles / 9),\n    leftOver: Math.ceil(tiles / 9) * 9 - tiles,\n  };\n}\n\nexport function Materials({ tiles }: Props): JSX.Element {\n  const woodenTiles = tiles.filter((item) => item === \"wooden\").length;\n  const grassTiles = tiles.filter((item) => item === \"grass\").length;\n\n  const { boxes: woodenBoxes, leftOver: woodenLeftOver } =\n    calculateBoxesPerTiles(woodenTiles);\n  const { boxes: grassBoxes, leftOver: grassLeftOver } =\n    calculateBoxesPerTiles(grassTiles);\n\n  return (\n    <section>\n      <table className=\"materials\">\n        <thead>\n          <tr>\n            <th></th>\n            <th className=\"center\">Wood</th>\n            <th className=\"center\">Grass</th>\n          </tr>\n        </thead>\n        <tbody>\n          <tr>\n            <td width=\"10\">Used</td>\n            <td className=\"center\">{woodenTiles}</td>\n            <td className=\"center\">{grassTiles}</td>\n          </tr>\n          <tr>\n            <td width=\"10\">Boxes</td>\n            <td className=\"center\">{woodenBoxes}</td>\n            <td className=\"center\">{grassBoxes}</td>\n          </tr>\n          <tr>\n            <td width=\"10\">Leftover</td>\n            <td className=\"center\">{woodenLeftOver}</td>\n            <td className=\"center\">{grassLeftOver}</td>\n          </tr>\n        </tbody>\n      </table>\n    </section>\n  );\n}\n","import \"./ShareButton.scss\";\nimport React, { useEffect, useRef, useState } from \"react\";\n\nexport function ShareButton(): JSX.Element {\n  const [copied, setCopied] = useState(false);\n  const inputRef = useRef<HTMLInputElement | null>(null);\n\n  function shareLink(): void {\n    setCopied(false);\n    if (inputRef.current) {\n      try {\n        inputRef.current.value = window.location.href;\n        inputRef.current.select();\n        inputRef.current.setSelectionRange(0, 99999); /* For mobile devices */\n\n        /* Copy the text inside the text field */\n        document.execCommand(\"copy\");\n        setCopied(true);\n      } catch (error) {\n        // Error if not supported;\n        console.log(error);\n      }\n    }\n  }\n\n  useEffect(() => {\n    if (copied) {\n      setTimeout(() => {\n        setCopied(false);\n      }, 2000);\n    }\n  }, [copied]);\n\n  return (\n    <div className=\"share-button\">\n      <input className=\"share-button__input\" type=\"text\" ref={inputRef}></input>\n      <div>\n        <button className=\"share-button__button\" onClick={() => shareLink()}>\n          Share design\n        </button>\n      </div>\n      {copied && <div className=\"share-button__copied\">URL Copied!</div>}\n    </div>\n  );\n}\n","import \"./App.scss\";\nimport { useEffect, useState } from \"react\";\nimport { Balcony } from \"./components/Balcony/Balcony\";\nimport { Brush, Brushes } from \"./components/Brushes/Brushes\";\nimport { Materials } from \"./components/Materials/Materials\";\nimport { updateUrl, parseUrl } from \"./model/util\";\nimport { ShareButton } from \"./components/ShareButton/ShareButton\";\n\nfunction App(): JSX.Element {\n  const [tiles, setTiles] = useState([\"\"]);\n  const [brush, setBrush] = useState<Brush>(\"wooden\");\n\n  function updateTile(index: number): void {\n    const updatedTiles = [...tiles];\n    updatedTiles[index] = brush;\n    setTiles(updatedTiles);\n    updateUrl(updatedTiles);\n  }\n\n  useEffect(() => {\n    setTiles(parseUrl());\n  }, []);\n\n  return (\n    <div className=\"app container\">\n      <header className=\"app__header\">\n        <h1>Balcony Floor Design</h1>\n      </header>\n      <div className=\"app__body\">\n        <Materials tiles={tiles} />\n        <Brushes\n          selectedBrush={brush}\n          onBrushSelect={(brush) => setBrush(brush)}\n        />\n        <Balcony tiles={tiles} onTileUpdate={(index) => updateTile(index)} />\n      </div>\n      <footer className=\"app__footer\">\n        <ShareButton />\n      </footer>\n    </div>\n  );\n}\n\nexport default App;\n","export function updateUrl(array: string[]): void {\n  const stringArray = array.map((item, index) => item.charAt(0)).join(\"-\");\n  const url = new URL(window.location.href);\n  const params = url.searchParams;\n\n  // new value of \"id\" is set to \"101\"\n  params.set(\"design\", stringArray);\n\n  // change the search property of the main url\n  url.search = params.toString();\n\n  // the new url string\n  const newUrl = url.toString();\n\n  // output : http://demourl.com/path?id=101&topic=main\n  // eslint-disable-next-line no-restricted-globals\n  history.replaceState({}, \"Balcony\", newUrl);\n}\n\nexport function parseUrl(): string[] {\n  const tilesArray: string[] = [];\n  for (let i = 0; i < 56; i++) {\n    tilesArray.push(\"\");\n  }\n\n  const queryString = window.location.search;\n  const urlParams = new URLSearchParams(queryString);\n  const design = urlParams.get(\"design\");\n\n  if (design) {\n    return design\n      .split(\"-\")\n      .map((item) => (item === \"w\" ? \"wooden\" : item === \"g\" ? \"grass\" : \"\"));\n  }\n  return tilesArray;\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.scss\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}